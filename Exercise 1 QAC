Exercise 1
 
Define the following Key Object Orientated Programming (OOP) principles with examples.
 
Encapsulation – Encapsulation is the process of combining data and functions into a single class to hide or protect information. In encapsulation the data is not accessed directly it is accessed through the functions inside the class. Encapsulation is a feature of object design meaning that all the objects data is held and hidden within the object and can only be accessed by members of that class. A real-life example of encapsulation is when we log into our emails, type up and send or receive an email there is a lot happening in the background before an email is sent or received. However we’re only concerned in sending or receiving emails so what happens behind the scenes when we send or receive emails is hidden from us.

Inheritance – Inheritance is the process of a class acquiring the properties and functionalities of another class. It enables a new class to take on the properties of an existing class. The existing class is called the parent or base class and the class which is inheriting the features of the parent or base class is called the child or derived class. Inheritance improves the reusability of a code as it allows every code or feature of a parent class to be reused by any number of child classes without the main code needing to be written again saving time and effort. A real life example of inheritance is any human being; a child inherits features such as eye colour, nose and height from their parents. 
 
Polymorphism - Polymorphism refers to a programming languages ability to process objects differently depending on their data type or class. It is a process of a method or function of a class taking multiple different forms. A smartphone is a good example of polymorphism as it can be used to perform many different functions depending on the type of data it is being asked to output. For example it can be used to make phone calls, type and send text messages and take pictures which are all different forms of data.

Abstraction – Abstraction is the process of a system displaying only the essential information and hiding irrevelevant details from the user. Abstraction is used to reduce complexity and allow efficient design and implementation of complex software systems. For example when we are using a mobile phone we only know about the screen and the keyboard. Everything else is hidden within the phone so we don’t know how the interior of a mobile phone makes it work because we don’t need to. The interior of the phone is irrelevant to us and stays hidden but the relevant features are displayed to us e.g. text messages being displayed on our screen.
